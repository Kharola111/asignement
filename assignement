const express = require('express');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// Product Data
let products = [
  {
    id: '1',
    name: 'Zip-Back Halter Top',
    age: 'Adult',
    closure: 'No Closure',
    color: 'Red',
    design: 'Plain',
    gender: 'Women',
    length: 'Middle',
    material: 'Silk',
    neckline: 'V-Neck',
    sleeves: 'Full Sleeves',
    style: 'Casual',
    subcategory: 'Casual Dresses'
  },
];

// Get all products
app.get('/products', (req, res) => {
  res.json(products);
});

// Get a specific product by ID
app.get('/products/:productId', (req, res) => {
  const productId = req.params.productId;
  const product = products.find(p => p.id === productId);

  if (!product) {
    return res.status(404).json({ error: 'Product not found in Database' });
  }

  res.json(product);
});

// Create a new product
app.post('/products', (req, res) => {
  const {
    name,
    age,
    closure,
    color,
    design,
    gender,
    length,
    material,
    neckline,
    sleeves,
    style,
    subcategory
  } = req.body;

  // Generate a unique ID for the product
  const productId = generateUniqueId();

  const newProduct = {
    id: productId,
    name,
    age,
    closure,
    color,
    design,
    gender,
    length,
    material,
    neckline,
    sleeves,
    style,
    subcategory
  };

  products.push(newProduct);

  res.status(201).json(newProduct);
});

// Update an existing product
app.put('/products/:productId', (req, res) => {
  const productId = req.params.productId;

  const product = products.find(p => p.id === productId);

  if (!product) {
    return res.status(404).json({ error: 'Product not found in  Database' });
  }

  const {
    name,
    age,
    closure,
    color,
    design,
    gender,
    length,
    material,
    neckline,
    sleeves,
    style,
    subcategory
  } = req.body;

  product.name = name;
  product.age = age;
  product.closure = closure;
  product.color = color;
  product.design = design;
  product.gender = gender;
  product.length = length;
  product.material = material;
  product.neckline = neckline;
  product.sleeves = sleeves;
  product.style = style;
  product.subcategory = subcategory;

  res.json(product);
});

// Delete a product
app.delete('/api/products/:productId', (req, res) => {
    const productId = req.params.productId;
    const index = products.findIndex(p => p.id === productId);
  
    if (index === -1) {
      return res.status(404).json({ error: 'Product not found' });
    }
  
    products.splice(index, 1);
  
    res.sendStatus(204);
  });

// Start the server
app.listen(3030, () => {
  console.log('Server is running on port 3030');
});

// Helper function to generate a unique ID
function generateUniqueId() {
  return Math.random().toString(36).substr(2, 9);
}
